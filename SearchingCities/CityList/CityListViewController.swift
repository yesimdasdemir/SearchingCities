//
//  CityListViewController.swift
//  SearchingCities
//
//  Created by Yeşim Daşdemir on 13.05.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol CityListDisplayLogic: AnyObject {
    func displayCityList(simpleItemModelList: [SimpleItemViewModel], cityItemList: [CityList.CityItemModel], contentViewModel: ContentViewModel?)
}

final class CityListViewController: UIViewController, CityListDisplayLogic {
    
    var interactor: CityListBusinessLogic?
    var router: (NSObjectProtocol & CityListRoutingLogic & CityListDataPassing)?
    
    @IBOutlet private var tableView: UITableView!
    private let searchController = UISearchController(searchResultsController: nil)
    private var simpleItemModelList: [SimpleItemViewModel] = []
    private var contentViewModel: ContentViewModel?
    private var cityModelList: [CityList.CityItemModel] = []
    private var filtered2Cities: [CityList.CityItemModel] = []
    private var filteredCities: [SimpleItemViewModel] = []
    private var lowerCaseCities: [CityList.CityItemModel] = []
    private let customCellHeight: CGFloat = 70.0
    
//    private var searchManager = SearchManager()
    
    private var lowerSearchText: String {
        return searchController.searchBar.text?.lowercased() ?? ""
    }
    
    var isSearchBarEmpty: Bool {
        return searchController.searchBar.text?.isEmpty ?? true
    }
    
    var isFiltering: Bool {
        return searchController.isActive && !isSearchBarEmpty
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CityListInteractor()
        let presenter = CityListPresenter()
        let router = CityListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
        
        registerTableView()
        setSearchViewController()
        interactor?.getCityList()
    }
    
    private func registerTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        
        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: "CustomTableViewCell")
    }
    
    private func setSearchViewController() {
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = "Cities"
        
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        navigationItem.accessibilityScroll(.down)
        definesPresentationContext = true
    }
    
    private func filterContentForSearchText(_ searchText: String,
                                            category: CityList.CityItemModel? = nil) {
        
        filtered2Cities = cityModelList.filter({ item in
            item.name!.lowercased().contains(searchText.lowercased())
        })
        
        filteredCities = filtered2Cities.map({ item in
            let title: String = item.name! + ", " + item.countryName!
            let subTitle: String = String((item.coordinate?.longitude)!) + ", " + String((item.coordinate?.latitude)!)
            
            return SimpleItemViewModel(id: item.id,
                                       title: title,
                                       subTitle: subTitle)
        })
    }
    
    func displayCityList(simpleItemModelList: [SimpleItemViewModel], cityItemList: [CityList.CityItemModel], contentViewModel: ContentViewModel?) {
        self.simpleItemModelList = simpleItemModelList
        cityModelList = cityItemList
        self.contentViewModel = contentViewModel
    }
}

extension CityListViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return isFiltering ? filteredCities.count : cityModelList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "CustomTableViewCell") as? CustomTableViewCell {
            let simpleItemView = SimpleItemView(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: customCellHeight))
            simpleItemView.contentViewModel = contentViewModel
            simpleItemView.viewModel = isFiltering ? filteredCities[indexPath.row] : simpleItemModelList[indexPath.row]
            
            cell.component = simpleItemView
            return cell
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cityViewModel: CityList.CityItemModel = isFiltering ? filtered2Cities[indexPath.row] : cityModelList[indexPath.row]
        let mapViewModel: CityDetail.MapViewModel = getMapViewModel(viewModel: cityViewModel)
        
        router?.routeToCityDetail(viewModel: mapViewModel)
    }
    
    private func getMapViewModel(viewModel: CityList.CityItemModel) -> CityDetail.MapViewModel {
        return CityDetail.MapViewModel(title: viewModel.name ?? "City",
                                       coordinate: CLLocationCoordinate2D(latitude: viewModel.coordinate?.latitude ?? 51.5549,
                                                                          longitude: viewModel.coordinate?.longitude ?? -0.108436),
                                       info: "City Location")
        
    }
}

extension CityListViewController: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        let searchBar = searchController.searchBar
        filterContentForSearchText(searchBar.text!)
        tableView.reloadData()
    }
}

//    class SearchManager {
//
//        private var cities: [String] = []
//        private var filterStart: Int = 0
//        private var filterEnd: Int = 0
//
//        init() {
//            if let url = Bundle.main.url(forResource: "cities", withExtension: "json") {
//                do {
//                    let jsonData = try Data(contentsOf: url)
//
//                    cities = parse(jsonData: jsonData).map({$0.name ?? ""})
//                }
//                catch {
//                    print(error)
//                }
//            }
//
//
//            filterStart = 0
//            filterEnd = cities.count - 1
//        }
//
//        private func parse(jsonData: Data) -> [CityList.CityItemModel] {
//            do {
//                debugPrint("decoded successfully")
//                return  try JSONDecoder().decode([CityList.CityItemModel].self, from: jsonData)
//            } catch {
//                print("error: \(error)")
//                return []
//            }
//        }
//
//
//        func filteredCityCount() -> Int {
//            if filterStart == -1 {
//                return 0
//            }
//
//            return filterEnd - filterStart + 1
//        }
//
//        func filteredCitiesAtIndex(index: Int) -> String {
//            return cities[filterStart + index]
//        }
//
//        func binarySearchLast(array: [String], target: String) -> Int {
//            var left = 0
//            var right = array.count - 1
//
//            while (left <= right) {
//                let mid = (left + right) / 2
//                let value = array[mid]
//
//                if (left == right && value.hasPrefix(target)) {
//                    return left
//                }
//
//                if value.hasPrefix(target) {
//                    if mid < array.count - 1 {
//                        if !array[mid + 1].hasPrefix(target) {
//                            return mid
//                        }
//                    }
//
//                    left = mid + 1
//                } else if (value < target) {
//                    left = mid + 1
//                } else if (value > target) {
//                    right = mid - 1
//                }
//            }
//
//            return -1
//        }
//
//        func binarySearchFirst(array: [String], target: String) -> Int {
//            var left = 0
//            var right = array.count - 1
//
//            while (left <= right) {
//                let mid = (left + right) / 2
//                let value = array[mid]
//
//                if (left == right && value.hasPrefix(target)) {
//                    return left
//                }
//
//                if value.hasPrefix(target) {
//                    if mid > 0 {
//                        if !array[mid - 1].hasPrefix(target) {
//                            return mid
//                        }
//                    }
//                    right = mid - 1
//                } else if (value < target) {
//                    left = mid + 1
//                } else if (value > target) {
//                    right = mid - 1
//                }
//            }
//
//            return -1
//        }
//
//
//        func updateFilter(filter: String) {
//
//            if filter == "" {
//                filterStart = 0
//                filterEnd = cities.count - 1
//                return
//            }
//
//            filterStart = binarySearchFirst(array: cities, target: filter)
//            filterEnd = binarySearchLast(array: cities, target: filter)
//        }
//    }
