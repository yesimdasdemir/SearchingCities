//
//  CityListViewController.swift
//  SearchingCities
//
//  Created by Yeşim Daşdemir on 13.05.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CityListDisplayLogic: AnyObject {
    func displayCityList(cityItemList: [CityList.CityItemModel])
}

final class CityListViewController: UIViewController, CityListDisplayLogic {
    
    var interactor: CityListBusinessLogic?
    var router: (NSObjectProtocol & CityListRoutingLogic & CityListDataPassing)?
    
    @IBOutlet private var tableView: UITableView!
    private let searchController = UISearchController(searchResultsController: nil)
    private var cityModelList: [CityList.CityItemModel]? = []
    private var filteredCities: [CityList.CityItemModel] = []
    
    var isSearchBarEmpty: Bool {
        return searchController.searchBar.text?.isEmpty ?? true
    }
    
    var isFiltering: Bool {
        return searchController.isActive && !isSearchBarEmpty
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CityListInteractor()
        let presenter = CityListPresenter()
        let router = CityListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        registerTableView()
        setSearchViewController()
        
        interactor?.getCityList()
    }
    
    private func registerTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        
        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: "CustomTableViewCell")
    }
    
    private func setSearchViewController() {
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = "Cities"
        
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        navigationItem.accessibilityScroll(.down)
        definesPresentationContext = true
    }
    
    private func filterContentForSearchText(_ searchText: String,
                                            category: CityList.CityItemModel? = nil) {
        
        filteredCities = (cityModelList?.filter({ item in
            (item.name!.lowercased().contains(searchText.lowercased()))
        }))!
    }

    func displayCityList(cityItemList: [CityList.CityItemModel]) {
        cityModelList = cityItemList
    }
}

extension CityListViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if isFiltering {
            guard let name = filteredCities[indexPath.row].name, let country = filteredCities[indexPath.row].countryName else {
                return UITableViewCell()
            }
            
            if let cell = tableView.dequeueReusableCell(withIdentifier: "CustomTableViewCell") {
                let simpleItemView = SimpleItemView()
                return cell
            }
        }
        
        guard let cityModelList = cityModelList, let name = cityModelList[indexPath.row].name, let country = cityModelList[indexPath.row].countryName else {
            return UITableViewCell()
        }
        
        if let cell = tableView.dequeueReusableCell(withIdentifier: "CustomTableViewCell") {
            cell.textLabel?.text = name + ", " + country
            return cell
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if isFiltering {
            return filteredCities.count
        }
        return cityModelList?.count ?? 0
    }
}

extension CityListViewController: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        let searchBar = searchController.searchBar
        filterContentForSearchText(searchBar.text!)
        tableView.reloadData()
    }
}
